{"version":3,"sources":["components/card-component/card-component.jsx","components/card-list/card-list.component.jsx","components/search-component/search-component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","event","setState","searchField","target","value","state","a","fetch","response","json","userResponse","this","temp","push","console","log","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wVAGaA,EAAO,SAACC,GAGnB,OACE,sBAAKC,UAAU,OAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aACHC,IAAI,wBAEN,6BAAKL,EAAMG,QAAQG,OACnB,6BAAKN,EAAMG,QAAQI,YCRZC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GACnB,OAAO,cAAC,EAAD,CAAMA,QAASA,GAAcA,EAAQC,UCPvCO,EAAY,SAACX,GACxB,OACE,uBACEY,KAAK,SACLC,YAAab,EAAMa,YACnBC,SAAUd,EAAMe,gBCiEPC,E,kDAlEb,aAAe,IAAD,8BACZ,gBA+BFD,aAAe,SAACE,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SA9B1C,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,4FAkBd,gCAAAI,EAAA,sEACyBC,MAAM,8CAD/B,cACQC,EADR,gBAE6BA,EAASC,OAFtC,OAEQC,EAFR,OAIEC,KAAKV,SAAS,CAAET,SAAUkB,KACtBE,EALN,YAKiBD,KAAKN,MAAMb,WACrBqB,KAAK,CAAExB,KAAM,UAAWF,GAAI,GAAIG,MAAO,kBAC5CqB,KAAKV,SAAS,CAAET,SAAUoB,IAC1BE,QAAQC,IAAIJ,KAAKN,MAAMb,UARzB,iD,0EAkBA,WAAS,MAG2BmB,KAAKN,MAA/Bb,EAHD,EAGCA,SAAUU,EAHX,EAGWA,YACdc,EAAmBxB,EAASyB,QAAO,SAAC/B,GACtC,OAAOA,EAAQG,KAAK6B,cAAcC,SAASjB,EAAYgB,kBAEzD,OACE,sBAAKlC,UAAU,MAAf,UAOE,kDACA,cAAC,EAAD,CACEY,YAAY,mBACZE,aAAca,KAAKb,eAErB,cAAC,EAAD,CAAUN,SAAUwB,W,GAzDVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.39bab778.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../card-component/card-style.css\";\n\nexport const Card = (props) => {\n  //const { id, name } = props.monster;\n\n  return (\n    <div className=\"card\">\n      <img\n        src={`https://robohash.org/${props.monster.id}?set=set4`}\n        alt=\"error loading kitty\"\n      />\n      <h2>{props.monster.name}</h2>\n      <h2>{props.monster.email}</h2>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./card-list.style.css\";\n\nimport { Card } from \"../card-component/card-component\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => {\n        return <Card monster={monster} key={monster.id}></Card>;\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const SearchBox = (props) => {\n  return (\n    <input\n      type=\"search\"\n      placeholder={props.placeholder}\n      onChange={props.handleChange}\n    />\n  );\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-component/search-component\";\n// class App extends React.Component\nclass App extends Component {\n  constructor() {\n    super();\n    // attributes of the class\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n    // if we don't use arrow functions, we would have to bind our methods to the class component\n    // we do this in the constructor\n    // this.handleChange = this.handleChange.bind(this)\n  }\n  // performs right after the first render of a page\n  // async componentDidMount() {\n  //   fetch(\"https://jsonplaceholder.typicode.com/users\")\n  //     .then((response) => response.json())\n  //     .then((user) => this.setState({ monsters: user }));\n  // }\n\n  async componentDidMount() {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const userResponse = await response.json();\n\n    this.setState({ monsters: userResponse });\n    let temp = [...this.state.monsters];\n    temp.push({ name: \"tembear\", id: 11, email: \"honey@bun.com\" });\n    this.setState({ monsters: temp });\n    console.log(this.state.monsters);\n  }\n\n  // arrow functions remove the need to bind 'this' to the context that we specify\n  // it will authomatically bind this to app (context which it is defined in)\n  // adds handleChange to the lexical scope of app\n  handleChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    // object deconstruction\n    // variable name in brackets must be the same as key in state\n    const { monsters, searchField } = this.state;\n    let filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return (\n      <div className=\"App\">\n        {/* for monster in monsters:\n          return <h1>{monster.name}</h1>\n          [<h2>{monster.name}</h2>\n          <h2>{monster.name}</h2>\n          <h2>{monster.name}</h2>\n          <h2>{monster.name}</h2>] */}\n        <h1>Kitty Cat Attack</h1>\n        <SearchBox\n          placeholder=\"Search Monssters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n        {/* {this.state.monsters.map((monster) => {\n            return <h2 key={monster.id}>{monster.name}</h2>;\n          })}\n        </CardList> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}